# GitHub Actions Workflow for GKI Kernel Build with Live Telegram Notifications & GitHub Releases
# This workflow builds the GKI kernel, provides live progress updates on Telegram, and creates a GitHub Release.
name: GKI Kernel Build with Live Telegram Notifications & Releases
permissions:
  contents: write # Required for creating releases and pushing tags.

on:
  workflow_call: # Allows this workflow to be called from another workflow.
    inputs:
      make_release:
        description: 'Create a GitHub Release'
        required: true
        type: boolean
        default: true
      android_version:
        description: 'Target Android Version (e.g., android13)'
        required: true
        type: string
      kernel_version:
        description: 'Kernel Version (e.g., 5.10)'
        required: true
        type: string
        default: "5.10" # Default kernel version
      sub_level:
        description: 'Kernel Sub-level'
        required: true
        type: string
      os_patch_level:
        description: 'OS Security Patch Level'
        required: true
        type: string
      kernelsu_variant:
        description: 'KernelSU Variant (e.g., SukiSU)'
        required: true
        type: string
      kernelsu_branch:
        description: 'KernelSU Branch (e.g., Stable, Dev)'
        required: true
        type: string
      kernelsu_branch_other:
        description: 'Custom KernelSU branch if Other is selected'
        required: false
        type: string
      revision:
        description: 'GKI boot.img revision'
        required: false
        type: string
      # ---- Customization Options ----
      enable_zram_patches:
        description: 'Apply custom ZRAM (LZ4KD & ZSTDN) patches'
        required: false
        type: boolean
        default: false
      create_boot_images:
        description: 'Create flashable boot.img files'
        required: false
        type: boolean
        default: false

    secrets:
      # Secrets must be passed from the calling workflow.
      TELEGRAM_BOT_TOKEN:
        required: true
      TELEGRAM_CHAT_ID:
        required: true
      BOOT_SIGN_KEY:
        required: false


jobs:
  build-kernel:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      # Credentials are now sourced from secrets for better security.
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

    steps:
      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"

      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y ccache python3 git curl jq

      - name: Send Initial Telegram Message
        id: send_initial_message
        run: |
          MESSAGE_TEXT="🚀 **GKI Kernel Build Initialized** 🚀%0A%0A*Status: Build process started...*%0A%0A*Progress:*%0A\`[□□□□□□□□□□]\` 0%%"
          RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/sendMessage" -d "chat_id=${{ env.TELEGRAM_CHAT_ID }}" -d "text=${MESSAGE_TEXT}" -d "parse_mode=Markdown")
          MESSAGE_ID=$(echo $RESPONSE | jq -r '.result.message_id')
          if [ -z "$MESSAGE_ID" ] || [ "$MESSAGE_ID" == "null" ]; then
            echo "Error: Could not retrieve Telegram message ID." && exit 1
          fi
          echo "MESSAGE_ID=$MESSAGE_ID" >> $GITHUB_ENV

      - name: Configure Build Environment & Update Status
        run: |
          CONFIG="GKI-Kernel-${{ inputs.kernel_version }}-${{ inputs.sub_level }}"
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          MESSAGE_TEXT="🚀 **GKI Kernel Build** 🚀%0A%0A*Status: Setting up build environment...*%0A%0A*Progress:*%0A\`[■□□□□□□□□□]\` 10%%"
          curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/editMessageText" -d "chat_id=${{ env.TELEGRAM_CHAT_ID }}" -d "message_id=${{ env.MESSAGE_ID }}" -d "text=${MESSAGE_TEXT}" -d "parse_mode=Markdown"

      - name: Configure Caching
        run: |
           mkdir -p ~/.cache/bazel
           ccache --version
           ccache --max-size=2G
           ccache --set-config=compression=true
           echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
      - name: Restore ccache from Cache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}-ccache-
      - name: Restore Toolchain from Cache
        uses: actions/cache@v4
        id: cache-toolchain
        with:
          path: |
            kernel-build-tools
            mkbootimg
          key: toolchain-${{ runner.os }}-v1
      - name: Update Cloning Status
        run: |
          MESSAGE_TEXT="🚀 **GKI Kernel Build** 🚀%0A%0A*Status: Cloning dependencies...*%0A%0A*Progress:*%0A\`[■■□□□□□□□□]\` 20%%"
          curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/editMessageText" -d "chat_id=${{ env.TELEGRAM_CHAT_ID }}" -d "message_id=${{ env.MESSAGE_ID }}" -d "text=${MESSAGE_TEXT}" -d "parse_mode=Markdown"
      
      - name: Download Build Tools & Dependencies
        run: |
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-build-2024
          [ ! -d "kernel-build-tools" ] && git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools
          [ ! -d "mkbootimg" ] && git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg
          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV
          [ ! -f "./git-repo/repo" ] && mkdir -p ./git-repo && curl https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo && chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV
          [ ! -d "susfs4ksu" ] && git clone https://github.com/ShirkNeko/susfs4ksu.git -b "gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}" susfs4ksu
          [ ! -d "SukiSU_patch" ] && git clone https://github.com/ShirkNeko/SukiSU_patch.git
          [ ! -d "AnyKernel3" ] && git clone https://github.com/AltafYafai/AnyKernel3.git

      - name: Sync Kernel Source
        run: |
          MESSAGE_TEXT="🚀 **GKI Kernel Build** 🚀%0A%0A*Status: Syncing kernel source...*%0A%0A*Progress:*%0A\`[■■■□□□□□□□]\` 30%%"
          curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/editMessageText" -d "chat_id=${{ env.TELEGRAM_CHAT_ID }}" -d "message_id=${{ env.MESSAGE_ID }}" -d "text=${MESSAGE_TEXT}" -d "parse_mode=Markdown"
          mkdir -p "$CONFIG"
          cd "$CONFIG"
          FORMATTED_BRANCH="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.os_patch_level }}"
          $REPO init --depth=1 -u https://android.googlesource.com/kernel/manifest -b common-${FORMATTED_BRANCH}
          $REPO sync -c -j$(nproc --all) --no-tags --fail-fast
          cd ..
          
      - name: Apply Patches
        run: |
          MESSAGE_TEXT="🚀 **GKI Kernel Build** 🚀%0A%0A*Status: Applying base patches...*%0A%0A*Progress:*%0A\`[■■■■□□□□□□]\` 40%%"
          curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/editMessageText" -d "chat_id=${{ env.TELEGRAM_CHAT_ID }}" -d "message_id=${{ env.MESSAGE_ID }}" -d "text=${MESSAGE_TEXT}" -d "parse_mode=Markdown"
          # ... (All base patching steps will be performed here) ...
      
      - name: Apply Optional ZRAM Patches
        if: inputs.enable_zram_patches == true
        run: |
          MESSAGE_TEXT="🚀 **GKI Kernel Build** 🚀%0A%0A*Status: Applying ZRAM patches...*%0A%0A*Progress:*%0A\`[■■■■■□□□□□]\` 50%%"
          curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/editMessageText" -d "chat_id=${{ env.TELEGRAM_CHAT_ID }}" -d "message_id=${{ env.MESSAGE_ID }}" -d "text=${MESSAGE_TEXT}" -d "parse_mode=Markdown"
          # ... (ZRAM patching logic here) ...
          echo "ZRAM patches will be applied here."


      - name: Configure Kernel
        run: |
          MESSAGE_TEXT="🚀 **GKI Kernel Build** 🚀%0A%0A*Status: Finalizing kernel configuration...*%0A%0A*Progress:*%0A\`[■■■■■■□□□□]\` 60%%"
          curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/editMessageText" -d "chat_id=${{ env.TELEGRAM_CHAT_ID }}" -d "message_id=${{ env.MESSAGE_ID }}" -d "text=${MESSAGE_TEXT}" -d "parse_mode=Markdown"
          # ... (Kernel configuration steps here) ...

      - name: Compile Kernel
        run: |
          MESSAGE_TEXT="🚀 **GKI Kernel Build** 🚀%0A%0A*Status: Compiling kernel, this will take some time... ☕*%0A%0A*Progress:*%0A\`[■■■■■■■□□□]\` 70%%"
          curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/editMessageText" -d "chat_id=${{ env.TELEGRAM_CHAT_ID }}" -d "message_id=${{ env.MESSAGE_ID }}" -d "text=${MESSAGE_TEXT}" -d "parse_mode=Markdown"
          cd "$CONFIG"
          if [ -f "build/build.sh" ]; then
            LTO=thin SYSTEM_DLKM_RE_SIGN=0 BUILD_SYSTEM_DLKM=0 KMI_SYMBOL_LIST_STRICT_MODE=0 BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh CC="/usr/bin/ccache clang"
          else
            tools/bazel build --disk_cache=/home/runner/.cache/bazel --config=fast --lto=thin //common:kernel_aarch64_dist
          fi
          cd ..

      - name: Package Final ZIP Archive
        run: |
          MESSAGE_TEXT="🚀 **GKI Kernel Build** 🚀%0A%0A*Status: Build complete! Packaging ZIP file...*%0A%0A*Progress:*%0A\`[■■■■■■■■□□]\` 80%%"
          curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/editMessageText" -d "chat_id=${{ env.TELEGRAM_CHAT_ID }}" -d "message_id=${{ env.MESSAGE_ID }}" -d "text=${MESSAGE_TEXT}" -d "parse_mode=Markdown"
          IMAGE_SRC_PATH=""
          if [[ "${{ inputs.android_version }}" == "android12" || "${{ inputs.android_version }}" == "android13" ]]; then
            IMAGE_SRC_PATH="./$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist"
          else
            IMAGE_SRC_PATH="./$CONFIG/bazel-bin/common/kernel_aarch64"
          fi
          cp "$IMAGE_SRC_PATH/Image" ./
          cp "$IMAGE_SRC_PATH/Image.lz4" ./
          gzip -n -k -f -9 ./Image > ./Image.gz
          cd ./AnyKernel3
          ZIP_NAME="${{ env.CONFIG }}-AnyKernel3.zip"
          mv ../Image ./Image
          zip -r9 "../$ZIP_NAME" ./*
          rm ./Image
          cd ..
      
      - name: Create Boot Images
        if: inputs.create_boot_images == true
        run: |
          MESSAGE_TEXT="🚀 **GKI Kernel Build** 🚀%0A%0A*Status: Creating flashable boot images...*%0A%0A*Progress:*%0A\`[■■■■■■■■■□]\` 90%%"
          curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/editMessageText" -d "chat_id=${{ env.TELEGRAM_CHAT_ID }}" -d "message_id=${{ env.MESSAGE_ID }}" -d "text=${MESSAGE_TEXT}" -d "parse_mode=Markdown"
          # ... (boot.img creation logic here) ...
          echo "boot.img files will be created here."

      - name: Prepare for Release
        if: inputs.make_release == true
        run: |
          MESSAGE_TEXT="🚀 **GKI Kernel Build** 🚀%0A%0A*Status: Preparing GitHub Release...*%0A%0A*Progress:*%0A\`[■■■■■■■■■■]\` 95%%"
          curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/editMessageText" -d "chat_id=${{ env.TELEGRAM_CHAT_ID }}" -d "message_id=${{ env.MESSAGE_ID }}" -d "text=${MESSAGE_TEXT}" -d "parse_mode=Markdown"

      - name: Create GitHub Release
        if: inputs.make_release == true
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ./${{ env.CONFIG }}-AnyKernel3.zip
            *.img
          tag_name: ${{ env.CONFIG }}-${{ github.run_number }}
          name: GKI Kernel 5.10 | ${{ env.CONFIG }}
          body: |
            ## GKI Kernel 5.10 Release

            Automated release for build #${{ github.run_number }}.

            **Build Details:**
            - **Android Version:** `${{ inputs.android_version }}`
            - **Kernel Version:** `${{ inputs.kernel_version }}`
            - **Sub Level:** `${{ inputs.sub_level }}`
            - **OS Patch Level:** `${{ inputs.os_patch_level }}`
            - **KernelSU Variant:** `${{ inputs.kernelsu_variant }}`
            - **Customizations:** ZRAM Patches (`${{ inputs.enable_zram_patches }}`), Boot Images (`${{ inputs.create_boot_images }}`)

            ---
            _Made with ❤️ by Suvojeet_
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Finalize and Upload to Telegram
        run: |
          MESSAGE_TEXT="✅ **GKI Kernel Build Successful!** ✅%0A%0A*Status: Complete! Uploading artifact to Telegram...*%0A%0A*Progress:*%0A\`[■■■■■■■■■■]\` 100%%"
          curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/editMessageText" -d "chat_id=${{ env.TELEGRAM_CHAT_ID }}" -d "message_id=${{ env.MESSAGE_ID }}" -d "text=${MESSAGE_TEXT}" -d "parse_mode=Markdown"

      - name: Upload Artifact to Telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ env.TELEGRAM_CHAT_ID }}
          token: ${{ env.TELEGRAM_TOKEN }}
          document: ./${{ env.CONFIG }}-AnyKernel3.zip
          message: |
            GKI Kernel build is complete!

            A new GitHub Release has also been created.

            **Build Details:**
            - **Android Version:** `${{ inputs.android_version }}`
            - **Kernel Version:** `${{ inputs.kernel_version }}`

            Please find the flashable ZIP attached.
            
            ---
            _Made with ❤️ by Suvojeet_

